#!/usr/bin/env node

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¢–û–õ–¨–ö–û –∏–∫–æ–Ω–∫–∏ –∏–∑ Figma.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–≥—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –∏ —Ç–∏–ø–∞–º.
 * –ó–∞–ø—É—Å–∫: npm run export
 */

import fs from "fs/promises";
import path from "path";
import { argv } from "process";
import { URL } from "url";
import crypto from "crypto";

// –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–º
import {
  loadManifest,
  saveManifest,
  findNewIcons,
  findDeletedIcons,
  findUpdatedIcons,
  createManifestEntry,
  type IconManifestEntry,
} from "./manifest";

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env
import dotenv from "dotenv";
dotenv.config();

// --- SVGO Handling ---
let svgoAvailable = false;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
let optimizeFn: any;

try {
  const svgoModule = await import("svgo");
  svgoAvailable = !!svgoModule.optimize;
  optimizeFn = svgoModule.optimize;
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
} catch (e) {
  svgoAvailable = false;
  console.warn(
    "SVGO –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ `npm install svgo`, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å SVG.",
  );
}

// --- Argument Parsing ---
type Args = {
  fileKey?: string;
  nodeId?: string;
  figmaNodeUrl?: string;
  outDir: string;
  concurrency: number;
  useAbsoluteBounds: boolean;
  keepOriginalNameSpaces: boolean;
  svgo: boolean;
  svgoConfigPath?: string;
  childrenOnly: boolean;
  minSize: number;
  maxSize: number;
};

function parseArgs(): Args {
  const args = Object.fromEntries(
    argv.slice(2).map((a) => {
      const [k, v] = a.replace(/^--/, "").split("=");
      return [k, v ?? "true"];
    }),
  ) as Record<string, string>;

  return {
    fileKey: args.fileKey ?? process.env.FILE_KEY,
    nodeId: args.nodeId ?? process.env.NODE_ID,
    figmaNodeUrl: args.figmaNodeUrl ?? process.env.FIGMA_NODE_URL,
    outDir: args.out ?? process.env.OUT_DIR ?? "./icons",
    concurrency: Math.max(1, Number(args.concurrency ?? args.c ?? 6)) || 6,
    useAbsoluteBounds: args.useAbsoluteBounds
      ? args.useAbsoluteBounds === "true"
      : true,
    keepOriginalNameSpaces: args.keepOriginalNameSpaces
      ? args.keepOriginalNameSpaces === "true"
      : false,
    svgo: args.svgo ? args.svgo === "true" : process.env.SVGO === "true",
    svgoConfigPath: args.svgoConfig ?? process.env.SVGO_CONFIG,
    childrenOnly: args.childrenOnly === "true",
    minSize: Number(args.minSize ?? 12), // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 12px
    maxSize: Number(args.maxSize ?? 64), // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 64px
  };
}

// --- Utility Functions ---
const STANDARD_SIZES = [12, 16, 20, 24, 28, 32, 36, 48, 64];

function nearestStandardSize(px: number): number {
  if (!isFinite(px) || px <= 0) return 24;
  let nearest = STANDARD_SIZES[0];
  let bestDiff = Math.abs(px - nearest);
  for (const s of STANDARD_SIZES) {
    const d = Math.abs(px - s);
    if (d < bestDiff) {
      nearest = s;
      bestDiff = d;
    }
  }
  return nearest;
}

function safeName(name: string, keepSpaces = false): string {
  let n = name.trim();

  // camelCase ‚Üí kebab-case
  n = n.replace(/([a-z])([A-Z])/g, "$1-$2");
  // –ü—Ä–æ–±–µ–ª—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è ‚Üí –¥–µ—Ñ–∏—Å
  if (!keepSpaces) n = n.replace(/[\s_]+/g, "-");
  // –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å
  // eslint-disable-next-line no-useless-escape
  n = n.replace(/[^a-zA-Z0-9\-]/g, "-");
  // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã ‚Üí –æ–¥–∏–Ω
  n = n.replace(/-+/g, "-");
  // –£–±—Ä–∞—Ç—å –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
  n = n.replace(/^-+|-+$/g, "");
  // –í –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
  n = n.toLowerCase();

  return n || "icon";
}

async function loadSvgoConfig(configPath?: string) {
  const defaultCfg = {
    multipass: true,
    plugins: [
      {
        name: "preset-default",
        params: {
          overrides: {
            removeViewBox: false,
            removeDimensions: false,
            removeDoctype: false,
            removeXMLProcInst: false,
            removeComments: false,
            removeMetadata: false,
            removeTitle: false,
            removeDesc: false,
            removeUselessDefs: false,
            removeEditorsNSData: false,
            removeEmptyAttrs: false,
            removeHiddenElems: false,
            removeEmptyText: false,
            removeEmptyContainers: false,
            convertShapeToPath: true,
            convertPathData: false,
            collapseGroups: false,
            cleanupListOfValues: false,
            removeXMLNS: false,
            sortAttrs: false,
            removeStyleElement: false,
            removeScripts: false,
          },
        },
      },
    ],
  };

  if (!configPath) return defaultCfg;

  try {
    const raw = await fs.readFile(path.resolve(configPath), "utf8");
    return JSON.parse(raw);
  } catch (e) {
    console.warn(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å svgo config, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π. –û—à–∏–±–∫–∞:",
      (e as Error).message,
    );
    return defaultCfg;
  }
}

// --- Main Logic ---
async function main() {
  const args = parseArgs();
  const token = process.env.FIGMA_TOKEN;

  if (!token) {
    console.error("–û—à–∏–±–∫–∞: –Ω—É–∂–µ–Ω FIGMA_TOKEN –≤ .env —Ñ–∞–π–ª–µ.");
    process.exit(2);
  }

  let fileKey = args.fileKey;
  let nodeId = args.nodeId;

  // –ü–∞—Ä—Å–∏–º URL, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
  if (args.figmaNodeUrl) {
    try {
      const url = new URL(args.figmaNodeUrl);
      const pathnameParts = url.pathname.split("/").filter(Boolean);
      if (pathnameParts[1] === "file" && pathnameParts[2]) {
        fileKey = pathnameParts[2];
      } else {
        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL: –Ω–µ –Ω–∞–π–¥–µ–Ω fileKey");
      }

      const nodeIdParam = url.searchParams.get("node-id");
      if (nodeIdParam) {
        nodeId = nodeIdParam.replace(/%3A/gi, ":");
      } else {
        throw new Error("–ü–∞—Ä–∞–º–µ—Ç—Ä 'node-id' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL");
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ FIGMA_NODE_URL:", (err as Error).message);
      process.exit(2);
    }
  }

  if (!fileKey) {
    console.error("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω FILE_KEY (–≤ .env –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö).");
    process.exit(2);
  }
  if (!nodeId) {
    console.error("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω NODE_ID (–≤ .env –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö).");
    process.exit(2);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ SVGO
  if (args.svgo && !svgoAvailable) {
    console.warn("SVGO –≤–∫–ª—é—á—ë–Ω, –Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é.");
    args.svgo = false;
  }

  const svgoOptions = args.svgo
    ? await loadSvgoConfig(args.svgoConfigPath)
    : undefined;
  const outDir = path.resolve(args.outDir);
  await fs.mkdir(outDir, { recursive: true });

  const nodeDataUrl = `https://api.figma.com/v1/files/${encodeURIComponent(fileKey)}/nodes?ids=${encodeURIComponent(nodeId)}`;
  console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–∑–ª–∞ ${nodeId}...`);

  let nodeDataResp;
  try {
    nodeDataResp = await fetch(nodeDataUrl, {
      headers: { "X-Figma-Token": token },
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Figma:", (err as Error).message);
    process.exit(3);
  }

  if (!nodeDataResp.ok) {
    const text = await nodeDataResp.text();
    console.error(`‚ùå –û—à–∏–±–∫–∞ API: ${nodeDataResp.status} ‚Äî ${text}`);
    process.exit(3);
  }

  const nodeData = await nodeDataResp.json();

  let rootNode = nodeData.nodes?.[nodeId]?.document;

  if (!rootNode && !nodeId.includes(":")) {
    const colonId = nodeId.replace(/-/g, ":");
    console.log(`‚ö†Ô∏è –£–∑–µ–ª '${nodeId}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å ':' ‚Üí '${colonId}'`);
    rootNode = nodeData.nodes?.[colonId]?.document;

    if (rootNode) {
      nodeId = colonId;
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —É–∑–µ–ª –ø–æ ID: ${colonId}`);
    }
  }

  if (!rootNode) {
    console.error(`‚ùå –£–∑–µ–ª '${nodeId}' –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    console.error("–î–æ—Å—Ç—É–ø–Ω—ã–µ ID –≤ –æ—Ç–≤–µ—Ç–µ:", Object.keys(nodeData.nodes || {}));
    process.exit(3);
  }

  // –°–æ–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û –∏–∫–æ–Ω–∫–∏
  const iconsToExport: Array<{
    id: string;
    name: string;
    width: number;
    height: number;
  }> = [];

  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars
  function traverse(node: any, isRoot = false) {
    if (!node || typeof node !== "object") return;

    const type = node.type ?? "";
    const name = node.name ?? `icon-${node.id}`;
    const id = node.id ?? "";

    // üî• –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–¢–†–û–ì–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø
    // –ò–∫–æ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º –ò–õ–ò –≤–µ–∫—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    if (["COMPONENT", "VECTOR"].includes(type)) {
      const bbox = node.absoluteBoundingBox;
      if (
        !bbox ||
        typeof bbox.width !== "number" ||
        typeof bbox.height !== "number"
      ) {
        return;
      }

      const width = Math.round(bbox.width);
      const height = Math.round(bbox.height);

      // üî• –§–ò–õ–¨–¢–† –ü–û –†–ê–ó–ú–ï–†–ê–ú (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ --minSize –∏ --maxSize)
      if (
        width < args.minSize ||
        height < args.minSize ||
        width > args.maxSize ||
        height > args.maxSize
      ) {
        console.debug(
          `üü° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ [${width}x${height}]: ${name}`,
        );
        return;
      }

      // üî• –§–ò–õ–¨–¢–† –ü–û –°–û–û–¢–ù–û–®–ï–ù–ò–Æ –°–¢–û–†–û–ù (–∏–∫–æ–Ω–∫–∏ –æ–±—ã—á–Ω–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ)
      const aspectRatio = Math.abs(width / height - 1);
      if (aspectRatio > 0.2) {
        // –î–æ–ø—É—Å–∫–∞–µ–º 20% –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        console.debug(
          `üü° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω [${width}x${height}]: ${name}`,
        );
        return;
      }

      iconsToExport.push({ id, name, width, height });
      return;
    }

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –¥–µ—Ç–µ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    if (
      ["FRAME", "GROUP", "COMPONENT_SET"].includes(type) &&
      Array.isArray(node.children)
    ) {
      for (const child of node.children) {
        traverse(child, false);
      }
    }
  }

  traverse(rootNode, true);

  if (iconsToExport.length === 0) {
    console.warn(
      "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–∫–æ–Ω–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å minSize/maxSize.",
    );
    console.log(
      `üí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --minSize=16 --maxSize=48 –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫`,
    );
    process.exit(0);
  }

  const manifestPath = path.join(outDir, "icons-manifest.json");
  try {
    await fs.access(manifestPath);
  } catch {
    const defaultManifest = {
      version: "1.0.0",
      generatedAt: new Date().toISOString(),
      icons: [],
    };
    await fs.writeFile(
      manifestPath,
      JSON.stringify(defaultManifest, null, 2),
      "utf8",
    );
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç: ${manifestPath}`);
  }

  const manifest = await loadManifest(outDir);
  const manifestIcons = manifest.icons;

  const currentIcons: IconManifestEntry[] = [];

  console.log(
    `‚úÖ –ù–∞–π–¥–µ–Ω–æ ${iconsToExport.length} –∏–∫–æ–Ω–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (—Ä–∞–∑–º–µ—Ä—ã ${args.minSize}x${args.minSize}‚Äì${args.maxSize}x${args.maxSize} px).`,
  );

  const manifestIconsMap = new Map(
    manifestIcons.map((icon) => [icon.id, icon]),
  );

  const BATCH_SIZE = 10;

  for (let i = 0; i < iconsToExport.length; i += BATCH_SIZE) {
    const batch = iconsToExport.slice(i, i + BATCH_SIZE);
    const idsParam = batch.map((n) => n.id).join(",");

    const imagesUrl = `https://api.figma.com/v1/images/${encodeURIComponent(fileKey)}?ids=${idsParam}&format=svg${args.useAbsoluteBounds ? "&use_absolute_bounds=true" : ""}`;

    let resp;
    try {
      resp = await fetch(imagesUrl, {
        headers: { "X-Figma-Token": token },
      });
    } catch (err) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",
        (err as Error).message,
      );
      continue;
    }

    if (!resp.ok) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ Figma Images API:",
        resp.status,
        await resp.text(),
      );
      continue;
    }

    const json = await resp.json();
    const imageUrls = json.images ?? {};

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª
    for (const icon of batch) {
      const svgUrl = imageUrls[icon.id];
      if (!svgUrl) {
        console.warn(
          `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è ${icon.id} (${icon.name})`,
        );
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –∏–∫–æ–Ω–∫–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–º
      const existingIcon = manifestIconsMap.get(icon.id);
      // –í—Å–µ–≥–¥–∞ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å Figma –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      // –ü–æ–∑–∂–µ —Ä–µ—à–∏–º, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –∏—Ö –Ω–∞ –¥–∏—Å–∫

      try {
        const svgResp = await fetch(svgUrl);
        if (!svgResp.ok) throw new Error(`HTTP ${svgResp.status}`);
        let svgText = await svgResp.text();

        // –£–¥–∞–ª—è–µ–º BOM
        if (svgText.charCodeAt(0) === 0xfeff) {
          svgText = svgText.slice(1);
        }

        // SVGO
        if (args.svgo && svgoAvailable && optimizeFn) {
          try {
            const result = await optimizeFn(svgText, svgoOptions);
            if (result?.data) svgText = result.data;
          } catch (err) {
            console.warn(
              `‚ö†Ô∏è SVGO –æ—à–∏–±–∫–∞ –¥–ª—è ${icon.name}:`,
              (err as Error).message,
            );
          }
        }
        // –ó–∞–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ fill="#..." –Ω–∞ fill="currentColor"
        svgText = svgText.replace(
          /fill="(#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3}))"/g,
          'fill="currentColor"',
        );

        const size = nearestStandardSize(icon.width);
        const baseName = safeName(icon.name, args.keepOriginalNameSpaces);
        const cleanedName = baseName
          .replace(
            /^(s|l|small|large|mini|huge|m|xl|xs|xxs|xxl|3xl|4xl|5xl)[_-]/i,
            "",
          )
          .trim();
        // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ s –∏ l –∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã –∏–ª–∏ –∫–æ–Ω—Ü–∞ –∏–º–µ–Ω–∏
        let finalName = cleanedName
          .replace(/[-_]s(?=[-_]|$)/gi, "-")
          .replace(/[-_]l(?=[-_]|$)/gi, "-");
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
        finalName = safeName(finalName, args.keepOriginalNameSpaces) || "icon";

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É—Ñ—Ñ–∏–∫—Å–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ –∏–º–µ–Ω–∏
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ–Ω—Ü–µ –∏–º–µ–Ω–∏ —Å—É—Ñ—Ñ–∏–∫—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ -16px.svg
        const hasSizeSuffix = /-\d+px\.svg$/.test(finalName + ".svg");
        const fileName = hasSizeSuffix
          ? `${finalName}.svg`
          : `${finalName}-${size}px.svg`;

        const filePath = path.join(outDir, fileName);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–º
        let shouldSave = true;
        if (existingIcon) {
          // –í—ã—á–∏—Å–ª—è–µ–º —Ö—ç—à –Ω–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
          const newHash = crypto
            .createHash("sha256")
            .update(svgText)
            .digest("hex");

          // –ï—Å–ª–∏ —Ö—ç—à–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç –∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ
          if (
            existingIcon.hash === newHash &&
            existingIcon.fileName === fileName
          ) {
            shouldSave = false;
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–∫–æ–Ω–∫—É –≤ currentIcons
            currentIcons.push(existingIcon);
            console.log(
              `‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π): ${fileName} (${icon.width}x${icon.height}px)`,
            );
          } else {
            // –ï—Å–ª–∏ —Ö—ç—à–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            // –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
            if (existingIcon.fileName !== fileName) {
              const oldFilePath = path.join(outDir, existingIcon.fileName);
              try {
                await fs.access(oldFilePath);
                await fs.unlink(oldFilePath);
                console.log(`üóë –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: ${existingIcon.fileName}`);
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
              } catch (err) {
                // –§–∞–π–ª —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
              }
            }
            console.log(
              `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞: ${fileName} (${icon.width}x${icon.height}px)`,
            );
          }
        }

        if (!shouldSave) {
          continue;
        }

        await fs.writeFile(filePath, svgText, "utf8");
        console.log(
          `‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω: ${fileName} (${icon.width}x${icon.height}px)${args.svgo ? " (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω)" : ""}`,
        );

        // –í—ã—á–∏—Å–ª—è–µ–º —Ö—ç—à —Ñ–∞–π–ª–∞ –∏–∑ svgText (–Ω–µ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ)
        const fileHash = crypto
          .createHash("sha256")
          .update(svgText)
          .digest("hex");

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        currentIcons.push(
          createManifestEntry(
            icon.id,
            icon.name,
            fileName,
            icon.width,
            icon.height,
            fileHash,
          ),
        );
      } catch (err) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${icon.id} (${icon.name}):`,
          (err as Error).message,
        );
      }
    }
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  const newIcons = findNewIcons(currentIcons, manifestIcons);
  const deletedIcons = findDeletedIcons(currentIcons, manifestIcons);
  const updatedIcons = findUpdatedIcons(currentIcons, manifestIcons);

  // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  if (newIcons.length > 0) {
    console.log(`‚ú® –ù–æ–≤—ã—Ö –∏–∫–æ–Ω–æ–∫: ${newIcons.length}`);
    newIcons.forEach((icon) =>
      console.log(`  + ${icon.name} (${icon.fileName})`),
    );
  }

  if (deletedIcons.length > 0) {
    console.log(`üóë –£–¥–∞–ª–µ–Ω–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫: ${deletedIcons.length}`);
    deletedIcons.forEach((icon) =>
      console.log(`  - ${icon.name} (${icon.fileName})`),
    );
  }

  if (updatedIcons.length > 0) {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫: ${updatedIcons.length}`);
    updatedIcons.forEach((icon) =>
      console.log(`  ~ ${icon.name} (${icon.fileName})`),
    );
  }

  if (
    newIcons.length === 0 &&
    deletedIcons.length === 0 &&
    updatedIcons.length === 0
  ) {
    console.log("üîÅ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∏–∫–æ–Ω–∫–∞—Ö.");
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
  manifest.icons = currentIcons;
  await saveManifest(outDir, manifest);
  console.log("üíæ –ú–∞–Ω–∏—Ñ–µ—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.");

  console.log("üéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.");
}

main().catch((err) => {
  console.error("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", err);
  process.exit(99);
});
