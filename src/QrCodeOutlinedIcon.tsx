import * as React from "react";
import type { IconProps } from "./types";

/**
 * QrCodeOutlinedIcon icon component.
 *
 * @description Supports sizes: small (12px), medium (16px, default), large (20px).
 * Automatically falls back to the closest available size if exact one is missing.
 *
 * @param fontSize - Icon size preset or custom pixel value
 * @param color - Icon color (supports CSS colors, variables, and 'currentColor')
 * @param ...props - All other SVG element props
 */

const svgChildren = {
  small: { content: { __html: "" }, viewBox: "0 0 16 16" },

  medium: {
    content: {
      __html: `<g fill="currentColor" clipPath="url(#a)"><path d="M.836 11.267c0-.427-.001-.782.026-1.07.028-.295.09-.57.244-.822.151-.246.359-.453.605-.604.252-.155.527-.217.822-.245.288-.027.643-.026 1.07-.026h.733c.614 0 1.125 0 1.53.054.418.056.796.18 1.1.483.303.304.427.681.483 1.1.055.404.054.916.054 1.53v.733c0 .427 0 .782-.027 1.07-.028.294-.09.57-.244.821a1.84 1.84 0 0 1-.605.605c-.252.155-.527.216-.821.244-.288.027-.643.027-1.07.027-.645 0-1.164 0-1.58-.04-.425-.04-.795-.126-1.127-.33a2.5 2.5 0 0 1-.825-.824c-.203-.333-.289-.702-.329-1.126-.04-.417-.04-.936-.04-1.58m1 0c0 .664 0 1.128.034 1.486.033.35.096.549.187.697.123.202.293.372.495.495.148.091.347.153.698.187.358.034.822.035 1.486.035.446 0 .746 0 .975-.022.221-.021.325-.06.393-.101a.84.84 0 0 0 .276-.275c.042-.069.08-.173.1-.394.022-.23.023-.529.023-.975v-.733c0-.643-.002-1.075-.045-1.396-.041-.308-.112-.44-.2-.527-.086-.087-.218-.159-.526-.2C5.41 9.501 4.98 9.5 4.336 9.5h-.733c-.447 0-.746 0-.975.022-.222.022-.326.059-.395.101a.8.8 0 0 0-.274.274c-.042.069-.08.173-.1.395-.022.23-.023.529-.023.975M8.5 4.336v-.733c0-.427 0-.782.026-1.07.028-.295.09-.57.245-.822.15-.246.358-.453.604-.605.252-.154.527-.216.822-.244.288-.027.643-.026 1.07-.026.644 0 1.163 0 1.58.039.424.04.793.126 1.126.33.336.205.619.488.825.824.203.333.29.702.33 1.126.04.417.039.936.039 1.581 0 .427 0 .782-.027 1.07-.028.294-.09.569-.244.821a1.84 1.84 0 0 1-.605.605c-.252.155-.527.216-.821.244-.288.027-.643.027-1.07.027h-.733c-.614 0-1.126 0-1.53-.054-.419-.056-.796-.18-1.1-.483-.304-.304-.427-.682-.483-1.1-.055-.405-.054-.916-.054-1.53m1 0c0 .643 0 1.074.044 1.396.041.308.113.44.2.527s.22.158.527.199c.321.043.753.045 1.396.045h.733c.446 0 .746 0 .975-.023.221-.02.325-.058.394-.1a.84.84 0 0 0 .275-.276c.042-.068.08-.172.1-.393.022-.23.023-.529.023-.975 0-.664-.001-1.128-.035-1.486-.034-.35-.096-.55-.187-.698a1.5 1.5 0 0 0-.495-.495c-.148-.091-.347-.154-.697-.187-.358-.034-.822-.034-1.486-.034-.446 0-.746 0-.975.022-.222.021-.326.059-.395.101a.8.8 0 0 0-.274.274c-.042.069-.08.173-.1.395-.022.23-.023.528-.023.975z"/><path d="M11 4.17c0-.344 0-.516.086-.637a.5.5 0 0 1 .11-.111c.122-.086.294-.086.637-.086s.516 0 .637.086q.065.046.11.11c.087.122.087.294.087.637s0 .516-.086.637a.5.5 0 0 1-.11.11c-.122.087-.294.087-.638.087-.343 0-.515 0-.636-.086a.5.5 0 0 1-.11-.111C11 4.685 11 4.513 11 4.169M8.5 14.666v-2h1v2a.5.5 0 0 1-1 0M12.667 8.5v1h-1.334c-.478 0-.8 0-1.045.025-.236.024-.346.067-.418.116a.8.8 0 0 0-.23.23c-.048.071-.09.18-.115.417-.025.245-.025.567-.025 1.045h-1c0-.457 0-.838.03-1.146.032-.315.102-.609.279-.873.133-.2.305-.372.505-.505.264-.177.558-.247.874-.279.307-.03.688-.03 1.145-.03zm2.502 4.167c0 .304 0 .557-.014.764a1.9 1.9 0 0 1-.126.604 1.83 1.83 0 0 1-.992.992c-.193.08-.393.11-.604.125-.207.014-.46.015-.764.015h-1.333v-1h1.333c.317 0 .531 0 .696-.012a1 1 0 0 0 .29-.051.83.83 0 0 0 .45-.452.9.9 0 0 0 .053-.29c.011-.165.01-.378.01-.695zm-1-3.667a.5.5 0 0 1 1 0v2.333h-1zM6.503 4.336v-.733c0-.446 0-.746-.023-.975-.02-.222-.058-.326-.1-.395a.8.8 0 0 0-.276-.274c-.068-.042-.172-.08-.393-.1-.23-.022-.529-.023-.975-.023-.664 0-1.128 0-1.486.034-.35.033-.55.096-.698.187a1.5 1.5 0 0 0-.495.495c-.091.148-.154.347-.187.698-.034.358-.034.822-.034 1.486 0 .446 0 .746.022.975.021.221.059.325.101.393a.8.8 0 0 0 .274.276c.069.042.173.08.395.1.23.022.529.023.975.023h.733c.643 0 1.074-.002 1.396-.045.308-.041.44-.112.527-.2.087-.086.158-.218.199-.526.043-.322.045-.753.045-1.396m1 0c0 .614 0 1.125-.054 1.53-.056.418-.18.796-.483 1.1-.304.303-.682.427-1.1.483-.405.055-.916.054-1.53.054h-.733c-.427 0-.782 0-1.07-.027-.295-.028-.57-.09-.822-.244a1.8 1.8 0 0 1-.605-.605C.952 6.375.89 6.1.862 5.806c-.027-.288-.026-.643-.026-1.07 0-.645 0-1.164.039-1.58.04-.425.126-.795.33-1.127a2.5 2.5 0 0 1 .824-.825c.332-.203.702-.289 1.126-.329.417-.04.936-.04 1.581-.04.427 0 .782 0 1.07.027.294.028.569.09.821.244.247.152.454.358.605.605.155.252.216.527.244.822.027.288.027.643.027 1.07z"/><path d="M3.336 4.17c0-.344 0-.516.086-.637a.5.5 0 0 1 .11-.111c.122-.086.294-.086.637-.086s.516 0 .637.086q.065.046.11.11c.087.122.087.294.087.637s0 .516-.086.637a.5.5 0 0 1-.111.11c-.121.087-.293.087-.637.087-.343 0-.515 0-.636-.086a.5.5 0 0 1-.111-.111c-.086-.121-.086-.293-.086-.637m0 7.663c0-.343 0-.515.086-.636a.5.5 0 0 1 .11-.11C3.655 11 3.827 11 4.17 11s.516 0 .637.086q.065.046.11.11c.087.122.087.294.087.637s0 .516-.086.637a.5.5 0 0 1-.111.11c-.121.087-.293.087-.637.087-.343 0-.515 0-.636-.086a.5.5 0 0 1-.111-.11c-.086-.122-.086-.294-.086-.638m7.328-.002c0-.468 0-.702.112-.87a.7.7 0 0 1 .184-.185c.168-.112.403-.112.87-.112.469 0 .703 0 .871.112a.7.7 0 0 1 .184.184c.112.168.112.403.112.87 0 .469 0 .703-.112.871a.7.7 0 0 1-.184.184c-.168.112-.402.112-.87.112s-.702 0-.87-.112a.7.7 0 0 1-.185-.184c-.112-.168-.112-.402-.112-.87"/></g><defs><clipPath id="a"><rect width="16" height="16" fill="currentColor" rx="5"/></clipPath></defs>`,
    },
    viewBox: "0 0 16 16",
  },

  large: { content: { __html: "" }, viewBox: "0 0 16 16" },
};

const sizeToPixel = {
  small: 12,
  medium: 16,
  large: 20,
};

type SizeKey = keyof typeof svgChildren;

function pickClosestSvg(fontSize: "small" | "medium" | "large" | number) {
  const available = Object.entries(svgChildren).filter(
    ([, data]) => data && data.content.__html,
  ) as [SizeKey, (typeof svgChildren)[SizeKey]][];

  if (available.length === 0) {
    return { content: { __html: "" }, viewBox: "0 0 16 16" };
  }

  if (typeof fontSize === "string") {
    const found = available.find(([key]) => key === fontSize);
    if (found) return found[1];
  }

  if (typeof fontSize === "number") {
    return available.reduce((best, curr) => {
      const [bestKey] = best;
      const [currKey] = curr;
      const bestDiff = Math.abs(
        sizeToPixel[bestKey as keyof typeof sizeToPixel] - fontSize,
      );
      const currDiff = Math.abs(
        sizeToPixel[currKey as keyof typeof sizeToPixel] - fontSize,
      );
      return currDiff < bestDiff ? curr : best;
    })[1];
  }

  // Fallback to medium, then first available
  const medium = available.find(([key]) => key === "medium");
  return medium ? medium[1] : available[0][1];
}

const QrCodeOutlinedIcon = React.forwardRef<SVGSVGElement, IconProps>(
  (props, ref) => {
    const {
      fontSize = "medium",
      color = "currentColor",
      style,
      ...other
    } = props;

    const selected = pickClosestSvg(fontSize);
    const viewBox = selected.viewBox;

    const sizeValue =
      typeof fontSize === "number"
        ? fontSize
        : sizeToPixel[fontSize as keyof typeof sizeToPixel] || 16;

    const finalStyle = {
      ...style,
      color,
    } as React.CSSProperties;

    return (
      <svg
        ref={ref}
        width={sizeValue}
        height={sizeValue}
        viewBox={viewBox}
        fill="none"
        style={finalStyle}
        xmlns="http://www.w3.org/2000/svg"
        {...other}
      >
        {selected.content.__html && (
          <g dangerouslySetInnerHTML={selected.content} />
        )}
      </svg>
    );
  },
);

QrCodeOutlinedIcon.displayName = "QrCodeOutlinedIcon";

export default QrCodeOutlinedIcon;
